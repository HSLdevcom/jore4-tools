name: "Start e2e environment"
description:
  "Builds e2e environment with docker-compose and tests that services are
  running."
inputs:
  bundle_version:
    description:
      Version of the docker-compose bundle to use (= github release version)
    required: false
    default: "e2e-docker-compose"
  bundle_repo:
    description: Repository to retrieve the bundle from
    required: false
    default: "HSLdevcom/jore4-tools"
  ui_version:
    description:
      Version of ui to use (docker image tag). Set to "" if using the default
      version.
    required: false
    default: ""
  hasura_version:
    description:
      Version of hasura to use (docker image tag). Set to "" if using the
      default version.
    required: false
    default: ""
  auth_version:
    description:
      Version of auth to use (docker image tag). Set to "" if using the default
      version.
    required: false
    default: ""
  mbtiles_version:
    description:
      Version of mbtiles server to use (docker image tag). Set to "" if using
      the default version.
    required: false
    default: ""
  jore3importer_version:
    description:
      Version of jore3importer to use (docker image tag). Set to "" if using the
      default version.
    required: false
    default: ""
  testdb_version:
    description:
      Version of testdb to use (docker image tag). Set to "" if using the
      default version.
    required: false
    default: ""
  mssqltestdb_version:
    description:
      Version of mssqltestdb to use (docker image tag). Set to "" if using the
      default version.
    required: false
    default: ""
  mapmatching_version:
    description:
      Version of map matching service to use (docker image tag). Set to "" if
      using the default version.
    required: false
    default: ""
  mapmatchingdb_version:
    description:
      Version of map matching database to use (docker image tag). Set to "" if
      using the default version.
    required: false
    default: ""
  cypress_version:
    description:
      Version of cypress tests to use (docker image tag). Set to "" if using the
      default version.
    required: false
    default: ""
  hastus_version:
    description:
      Version of hastus importer to use (docker image tag). Set to "" if using
      the default version.
    required: false
    default: ""
  custom_docker_compose:
    description:
      Path for an additional docker-compose file to be used when starting up the
      environment. Can be used to e.g. run tests with the repository's own
      docker-compose.custom.yml setup
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Download and extract e2e docker-compose release
      run: |
        mkdir -p ${{ github.workspace }}/docker
        curl -L https://github.com/HSLdevcom/jore4-tools/releases/download/${{ inputs.bundle_version }}/e2e-docker-compose.tar.gz --silent -o compose-bundle.tar.gz
        tar -xzf compose-bundle.tar.gz -C ${{ github.workspace }}/docker/ | bash
        rm compose-bundle.tar.gz
      shell: bash

    - name: Start e2e environment
      # use environment variables within the docker-compose bundle to override some images
      env:
        UI_DOCKER_IMAGE: ${{ inputs.ui_version }}
        HASURA_DOCKER_IMAGE: ${{ inputs.hasura_version }}
        AUTH_DOCKER_IMAGE: ${{ inputs.auth_version }}
        MBTILES_DOCKER_IMAGE: ${{ inputs.mbtiles_version }}
        JORE3IMPORTER_DOCKER_IMAGE: ${{ inputs.jore3importer_version }}
        TESTDB_DOCKER_IMAGE: ${{ inputs.testdb_version }}
        MSSQLTESTDB_DOCKER_IMAGE: ${{ inputs.mssqltestdb_version }}
        MAPMATCHING_DOCKER_IMAGE: ${{ inputs.mapmatching_version }}
        MAPMATCHINGDB_DOCKER_IMAGE: ${{ inputs.mapmatchingdb_version }}
        CYPRESS_DOCKER_IMAGE: ${{ inputs.cypress_version }}
        HASTUS_DOCKER_IMAGE: ${{ inputs.hastus_version }}
      run: |
        docker-compose -f ${{ github.workspace }}/docker/docker-compose.yml ${{ inputs.custom_docker_compose != '' && format('-f {0}', inputs.custom_docker_compose) || '' }} up -d
      shell: bash

    - name: Show which versions of the docker images are spun up
      run: docker ps
      shell: bash

    - name: Verify that UI is up and running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command: "curl --fail http://localhost:3302 --output /dev/null --silent"

    - name: Verify that UI is up and running through proxy
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command: "curl --fail http://localhost:3300 --output /dev/null --silent"

    - name: Verify that postgresql is up and running
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command: "pg_isready -h localhost -p 6432"
        # it takes a while for the database to start
        retries: 50

    - name: Verify that mssql testdb is up and running
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      env:
        SA_PASSWORD: "P@ssw0rd"
      with:
        command:
          'sqlcmd -S 127.0.0.1 -U sa -P "$SA_PASSWORD" -d master -Q "SELECT
          ''OK'';"'
        # it takes a while for the database to start
        retries: 50

      # on some rare occasions unfortunately this is failing...
    - name: Debug on failure
      if: ${{ failure() }}
      run: |
        docker logs mssqltestdb || echo "no mssql container"
      shell: bash

    - name: Verify that hasura is up and running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3201/healthz --output /dev/null --silent"

    - name: Verify that hasura is up and running through proxy
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3300/api/graphql/healthz --output
          /dev/null --silent"

    - name: Verify that auth backend is up and running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3200/actuator/health --output /dev/null
          --silent"

    - name: Verify that auth backend has access to database
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3200/public/v1/login --output /dev/null
          --silent"

    - name: Verify that auth backend is up and running through proxy
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3300/api/auth/actuator/health --output
          /dev/null --silent"

    - name: Verify that mbtiles server is up and running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3203/services --output /dev/null
          --silent"

    - name: Verify that mbtiles server is up and running through proxy
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3300/api/mbtiles/services --output
          /dev/null --silent"

    - name: Verify that jore3 importer is up and running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3004/actuator/health --output /dev/null
          --silent"

    - name: Verify that map matching database is up and running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command: "pg_isready -h localhost -p 6433"

    - name: Verify that map matching server is up and running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3005/actuator/health --output /dev/null
          --silent"

    - name: Verify that map matching server is up and running through proxy
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3300/api/mapmatching/actuator/health
          --output /dev/null --silent"

    - name: Verify that cypress test container is up and running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command: "docker exec cypress yarn cypress --version"

    - name: Verify that hastus importer is up and running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3008/actuator/health --output /dev/null
          --silent"

    - name: Verify that hastus importer is up and running through proxy
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command:
          "curl --fail http://localhost:3300/api/hastus/actuator/health --output
          /dev/null --silent"

    - name: Verify that timetables-api is up and running running standalone
      uses: HSLdevcom/jore4-tools/github-actions/healthcheck@healthcheck-v1
      with:
        command: "curl --fail http://localhost:3009/actuator/health --output
          /dev/null --silent"

    - name: Verify that all containers are healthy
      run: '[ -z "$(docker ps -q --filter health=unhealthy)" ]'
      shell: bash
